name: Deploy EPK to DigitalOcean (Nginx)

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com/${{ secrets.DOCR_NAME }}
  IMAGE: ${{ env.REGISTRY }}/mortrem-epk

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Build and push image
        id: meta
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE:$TAG -t $IMAGE:latest .
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH & deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail

            if ! command -v docker >/dev/null; then
              curl -fsSL https://get.docker.com | sh
            fi

            sudo mkdir -p /srv/mortrem-epk
            cd /srv/mortrem-epk

            # Login to DOCR (idempotent)
            echo "${{ secrets.DO_API_TOKEN }}" | sudo docker login registry.digitalocean.com -u doctl --password-stdin || true

            # Write/update compose file
            cat > docker-compose.prod.yml <<'YAML'
            services:
              web:
                image: registry.digitalocean.com/${DOCR_NAME}/mortrem-epk:${IMAGE_TAG}
                ports:
                  - "80:80"
                environment:
                  CDN_BASE_URL: "${CDN_BASE_URL}"
                restart: unless-stopped
            YAML

            # Vars used by the compose file
            export DOCR_NAME="${{ secrets.DOCR_NAME }}"
            export IMAGE_TAG="${{ needs.build-and-push.outputs.IMAGE_TAG }}"
            export CDN_BASE_URL="${{ secrets.CDN_BASE_URL }}"

            # Open basic firewall (if UFW enabled)
            if command -v ufw >/dev/null; then
              sudo ufw allow 80/tcp || true
            fi

            # Run/update
            sudo docker compose -f docker-compose.prod.yml up -d
