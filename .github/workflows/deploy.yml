name: Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com/${{ secrets.DOCR_NAME }}
  IMAGE: registry.digitalocean.com/${{ secrets.DOCR_NAME }}/mortrem-epk

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Build & push image
        id: meta
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE:$TAG -t $IMAGE:latest .
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT

  sync-assets:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Sync assets to DigitalOcean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY_SECRET }}
          SPACES_REGION: ${{ secrets.SPACES_REGION }}
          SPACES_BUCKET: ${{ secrets.SPACES_BUCKET }}
        run: |
          set -euo pipefail
          ENDPOINT="https://${SPACES_REGION}.digitaloceanspaces.com"
          aws s3 sync ./assets "s3://${SPACES_BUCKET}/assets" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --delete \
            --no-progress

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # copy the compose file to the droplet
      - name: Upload compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: |
            docker-compose.prod.yml
          target: /srv/mortrem-epk/
          overwrite: true

      - name: SSH & deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euxo pipefail

            sudo mkdir -p /srv/mortrem-epk
            cd /srv/mortrem-epk

            # Install Docker if missing
            if ! command -v docker >/dev/null; then
              curl -fsSL https://get.docker.com | sh
            fi

            # Open firewall for web traffic (if UFW is present)
            if command -v ufw >/dev/null; then
              sudo ufw allow 80/tcp || true
              sudo ufw allow 443/tcp || true
            fi

            # Login to DOCR
            echo "${{ secrets.DO_API_TOKEN }}" | sudo docker login registry.digitalocean.com -u doctl --password-stdin || true

            # Write .env used by compose variable substitution
            cat > .env <<'EOF'
            DOCR_NAME=${{ secrets.DOCR_NAME }}
            IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}
            CDN_BASE_URL=${{ secrets.CDN_BASE_URL }}
            EOF

            # Pull & run
            sudo docker compose --env-file .env -f docker-compose.prod.yml pull
            sudo docker compose --env-file .env -f docker-compose.prod.yml up -d

            # optional cleanup
            sudo docker system prune -af || true
