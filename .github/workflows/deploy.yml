name: Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: registry.digitalocean.com/${{ secrets.DOCR_NAME }}
  IMAGE: registry.digitalocean.com/${{ secrets.DOCR_NAME }}/mortrem-epk

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.IMAGE_TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Login to DO Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Build & push image
        id: meta
        run: |
          TAG=${GITHUB_SHA::7}
          docker build -t $IMAGE:$TAG -t $IMAGE:latest .
          docker push $IMAGE:$TAG
          docker push $IMAGE:latest
          echo "IMAGE_TAG=$TAG" >> $GITHUB_OUTPUT

  sync-assets:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Sync assets to DigitalOcean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
          SPACES_REGION: ${{ secrets.SPACES_REGION }}      # e.g. nyc3
          SPACES_BUCKET: ${{ secrets.SPACES_BUCKET }}      # e.g. mortrem-epk
        run: |
          set -euo pipefail
          ENDPOINT="https://${SPACES_REGION}.digitaloceanspaces.com"
          aws s3 sync ./assets "s3://${SPACES_BUCKET}/assets" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --delete \
            --no-progress

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, sync-assets]
    steps:
      - uses: actions/checkout@v4

      # Copy exactly the files the server should run (declarative)
      - name: Upload compose + Caddyfile + entrypoint
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}             # keep 22 (see note about 443 in header)
          source: |
            docker-compose.prod.yml
            Caddyfile
            scripts/docker-entrypoint.sh
          target: /srv/mortrem-epk
          overwrite: true
          strip_components: 0

      - name: SSH deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            cd /srv/mortrem-epk

            # Log in to DOCR (idempotent)
            echo "${{ secrets.DO_API_TOKEN }}" | docker login registry.digitalocean.com -u doctl --password-stdin || true

            # Write env file used by compose (declarative inputs from repo secrets)
            cat > .env.prod <<EOF
            DOCR_NAME=${{ secrets.DOCR_NAME }}
            IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}
            DOMAIN=${{ secrets.DOMAIN }}                 # e.g. epk.mortrem.band
            CDN_BASE_URL=${{ secrets.CDN_BASE_URL }}     # https://<space>.<region>.cdn.digitaloceanspaces.com
            EOF

            # Open firewall (idempotent)
            if command -v ufw >/dev/null 2>&1; then
              ufw allow 80/tcp || true
              ufw allow 443/tcp || true
            fi

            # Pull and run (purely from committed files)
            docker compose -f docker-compose.prod.yml --env-file .env.prod pull
            docker compose -f docker-compose.prod.yml --env-file .env.prod up -d

            # Show status
            docker compose -f docker-compose.prod.yml ps
